// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"let foo = 1n + 1;
          ~~~~~~ Numeric '+' operations must either be both bigints or both numbers. Got \`bigint\` + \`number\`.
let fn = (a: string, b: never) => a + b;
                                      ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`never\`.
"
`;

exports[` 2`] = `
"let foo = 1n + 1n;
let fn = (a: string, b: string) => a + b;
"
`;

exports[` 3`] = `
"let fn = (a: number, b: []) => a + b;
                                   ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`[]\`.
let fn = (a: string, b: []) => a + b;
                                   ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`[]\`.
"
`;

exports[` 4`] = `
"let fn = (a: number, b: any) => a + b;
let fn = (a: string, b: any) => a + b;
"
`;

exports[` 5`] = `
"let fn = (a: number, b: unknown) => a + b;
                                        ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`unknown\`.
let fn = (a: string, b: unknown) => a + b;
                                        ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`unknown\`.
"
`;

exports[` 6`] = `
"let fn = (a: number, b: boolean) => a + b;
let fn = (a: string, b: boolean) => a + b;
"
`;

exports[` 7`] = `
"let fn = (a: number, b: unknown) => a + b;
                                        ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`unknown\`.
let fn = (a: number, b: never) => a + b;
                                      ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`never\`.
let fn = (a: string, b: unknown) => a + b;
                                        ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`unknown\`.
let fn = (a: string, b: never) => a + b;
                                      ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`never\`.
"
`;

exports[` 8`] = `
"let fn = (a: number, b: undefined) => a + b;
let fn = (a: number, b: null) => a + b;
let fn = (a: string, b: undefined) => a + b;
let fn = (a: string, b: null) => a + b;
"
`;

exports[` 9`] = `
"let fn = (a: number, b: unknown) => a + b;
                                        ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`unknown\`.
let fn = (a: number, b: never) => a + b;
                                      ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`never\`.
"
`;

exports[` 10`] = `
"let fn = (a: number, b: string) => a + b;
let fn = (a: number, b: number | string) => a + b;
"
`;

exports[` 11`] = `
"let fn = (a: number, b: RegExp) => a + b;
                                       ~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`RegExp\`.
"
`;

exports[` 12`] = `
"let fn = (a: string, b: RegExp) => a + b;
"
`;

exports[` 13`] = `
"let foo: bigint = 0n;
foo += 1;
~~~~~~~~ Numeric '+' operations must either be both bigints or both numbers. Got \`bigint\` + \`number\`.

let bar: number[] = [1];
bar += 1;
~~~ Invalid operand for a '+' operation. Operands must each be a number or string, allowing a string + any of: \`any\`, \`boolean\`, \`null\`, \`RegExp\`, \`undefined\`. Got \`number[]\`.
"
`;

exports[` 14`] = `
"let foo: bigint = 0n;
foo += 1n;

let bar: number = 1;
bar += 1;
"
`;
